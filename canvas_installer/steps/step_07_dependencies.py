"""
Step 7: Install Dependencies and Compile Assets
"""

from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TaskProgressColumn
from .base_step import BaseStep


class DependenciesStep(BaseStep):
    """Install Canvas dependencies and compile assets"""
    
    @property
    def step_name(self) -> str:
        return "Install Dependencies & Compile Assets"
    
    @property
    def step_description(self) -> str:
        return "ðŸ“š Installing Dependencies..."
    
    def execute(self) -> bool:
        """Execute dependencies installation and asset compilation"""
        self.log_start()
        
        try:
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                BarColumn(),
                TaskProgressColumn(),
                transient=True
            ) as progress:
                
                total_steps = 12
                task = progress.add_task("Installing dependencies...", total=total_steps)
                
                commands = [
                    ("sudo apt-get install -y libyaml-dev", "Installing YAML development libraries"),
                    ("sudo apt-get install -y cmdtest", "Installing command test utilities"),
                    ("sudo gem install bundler --version 2.5.10", "Installing Bundler"),
                    ("cd /var/canvas && sudo -u canvas bundle config set --local path vendor/bundle", "Configuring bundle path"),
                    ("cd /var/canvas && sudo -u canvas bundle install", "Installing Ruby gems"),
                    ("sudo gem update strscan", "Updating strscan gem"),
                    ("sudo gem uninstall stringio -I", "Removing old stringio"),
                    ("sudo gem install stringio -v 3.1.1", "Installing stringio 3.1.1"),
                    ("sudo gem uninstall base64 -I", "Removing old base64"),
                    ("sudo gem install base64 -v 0.2.0", "Installing base64 0.2.0"),
                    ("cd /var/canvas && sudo -u canvas yarn install", "Installing Node.js packages"),
                    ("cd /var/canvas && sudo -u canvas yarn gulp rev", "Building assets")
                ]
                
                for i, (cmd, desc) in enumerate(commands):
                    progress.update(task, description=desc, completed=i)
                    self.run_command(cmd, desc, timeout=1800)  # 30 min timeout for long operations
                    progress.update(task, completed=i+1)
                
                # Database initialization
                progress.update(task, description="Initializing database...")
                db_commands = [
                    "cd /var/canvas && mv db/migrate/20210823222355_change_immersive_reader_allowed_on_to_on.rb . 2>/dev/null || true",
                    "cd /var/canvas && mv db/migrate/20210812210129_add_singleton_column.rb db/migrate/20111111214311_add_singleton_column.rb 2>/dev/null || true",
                    "cd /var/canvas && sudo -u canvas RAILS_ENV=production bundle exec rake db:initial_setup",
                    "cd /var/canvas && mv 20210823222355_change_immersive_reader_allowed_on_to_on.rb db/migrate/ 2>/dev/null || true",
                    "cd /var/canvas && sudo -u canvas RAILS_ENV=production bundle exec rake db:migrate"
                ]
                
                for cmd in db_commands:
                    self.run_command(cmd, "Database setup", timeout=1800)
                
                # Create directories and compile assets
                progress.update(task, description="Creating directories and compiling assets...")
                final_commands = [
                    "cd /var/canvas && sudo -u canvas mkdir -p log tmp/pids public/assets app/stylesheets/brandable_css_brands",
                    "cd /var/canvas && sudo -u canvas touch app/stylesheets/_brandable_variables_defaults_autogenerated.scss Gemfile.lock log/production.log",
                    "cd /var/canvas && sudo -u canvas RAILS_ENV=production bundle exec rake canvas:compile_assets"
                ]
                
                for cmd in final_commands:
                    self.run_command(cmd, "Final setup", timeout=2400)  # 40 min timeout
            
            self.log_success()
            return True
            
        except Exception as e:
            self.log_failure(e)
            return False